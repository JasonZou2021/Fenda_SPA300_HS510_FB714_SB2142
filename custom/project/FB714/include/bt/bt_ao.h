#ifndef __BT_AO_H__
#define __BT_AO_H__
#include "qf_sync.h"
#include "qp_pub.h"
#include "qep.h"
//#include "bt_heap_manager.h"
#include "bt_common.h"
#include "bt_ao_action.h"

typedef enum BTEVTSIG
{
	BT_BASE_TYPE_SIG,
	BT_INIT_SIG = BT_BASE_TYPE_SIG,
	BT_DELINIT_SIG,
	BT_ENABLE_SIG,
	BT_DISABLE_SIG,
	BT_POWER_DBM_SET_SIG,
	BT_DUTTEST_ON_SIG,
	BT_SWITCH_MODE_SIG,
	BT_AUTOCONNECT_ENABLE_SIG,//star auto connect:phone or headphone
	BT_AUTOCONNECT_DISABLE_SIG,//stop auto connect
	BT_SET_SCAN_MODE_SIG,
	BT_HINT_ON_SIG,
	BT_HINT_OFF_SIG,
	BT_SUB_HINT_ON_SIG,
	BT_SUB_HINT_OFF_SIG,
	BT_SET_SUB_WATERLEVEL_SIG,
	BT_AUDIO_CODEC_RESET_SIG,
	BT_STANDBY_ON_SIG,
	BT_STANDBY_OFF_SIG,
	BT_AP_UPGRADE_INIT,
	BT_MODE_ON,
	BT_MODE_OFF,
	BT_SETAPPCURRENTSOURCE,
	BT_BASE_TYPE_MAX__SIG = BT_SETAPPCURRENTSOURCE,

	BT_COMM_TYPE_SIG,
//=====bt user action=====
	BT_USER_ACTION_SIG = BT_COMM_TYPE_SIG,
	BT_SET_PINCODE_SIG = BT_USER_ACTION_SIG,
	BT_REPLY_PINCODE_SIG,
	BT_SET_BT_NAME_SIG,
	BT_SET_BT_LMP_NAME_SIG,
	BT_SET_BT_DEVICE_CLASS_SIG,
	BT_SET_BT_ADDR_SIG,
	BT_SEARCH_SIG,
	BT_UNSEARCH_SIG,
	BT_PAIR_SIG,
	BT_UNPAIR_SIG,
	BT_ADDBONDDEV_SIG,
	BT_CLEARBONDDEV_SIG,
	BT_GET_REMOTE_DEVICE_RSSI,
	BT_A2DP_CONNECT_SIG,
	BT_A2DP_DISCONNECT_SIG,

	BT_AVRCP_MUSIC_VOLUME_SYNC_SAMSUNG,

	BT_SPP_CONNECT_SIG,
	BT_SPP_CONNECT_SAMSUNG_SIG,
	BT_SPP_DISCONNECT_SIG,
	BT_SPP_DATA_OUT_SIG,
	BT_SDP_DID_REQUEST_SIG,
	BT_DENY_CONNECT_SET_SIG,
	BT_USER_ACTION_MAX_SIG = BT_DENY_CONNECT_SET_SIG,

	//===OTHER===
	BT_IR_SIG,
	BT_PLAY_SIG = BT_IR_SIG,
	BT_PAUSE_SIG,
	BT_NEXT_SIG,
	BT_PREV_SIG,
	BT_VOLUME_CHANGE_SIG,
	BT_WSS_PLAY_SIG,
	BT_WSS_PAUSE_SIG,
	//BT_STOP,
	BT_IR_MAX_SIG = BT_WSS_PAUSE_SIG,
	BT_COMM_TYPE_MAX_SIG = BT_IR_MAX_SIG,

	BT_TRANSMIT_TYPE_SIG,
	BT_TRANSMIT_ON_SIG = BT_TRANSMIT_TYPE_SIG,
	BT_TRANSMIT_OFF_SIG,
	BT_UPGRADE_SUB_SIG,
	BT_SEND_DATA_SIG,//REMOTE APP
	BT_SEND_CUSTOM_DATA_SIG,
	BT_TRANSMIT_TYPE_MAX_SIG = BT_SEND_CUSTOM_DATA_SIG,

	BT_MSG_MAX,
}BTEVTSIG_e;



//=====bt service && ao module cbk msg===
typedef enum
{
	BT_SRV_CBK_SIG,
	BT_BASE_CBK_SIG = BT_SRV_CBK_SIG,
	BT_READY_SIG = BT_BASE_CBK_SIG,
	BT_UNREADY_SIG,
	BT_SEARCH_RESULT_SIG,
	BT_SEARCH_FINISH_SIG,
	BT_ACL_CONNECT_SIG,
	BT_PAIRING_IND_SIG,//REQ
	BT_PAIRED_OK_SIG,
	BT_UNPAIRED_OK_SIG,
	BT_CLEARBOND_OK_SIG,
	BT_TWS_SWITCH_FINISH_SIG,
	BT_ENCODE_PLAY_REQ_SIG,
	BT_SOURCE_STATE_UPDATE_SIG,
	BT_DEV_CONNECT_TIMEOUT_SIG,
	BT_REMOTE_DEVICE_NAME_SIG,
	BT_REMOTE_DEVICE_RSSI_SIG,
	BT_BASE_CBK_MAX_SIG = BT_REMOTE_DEVICE_RSSI_SIG,

	BT_A2DP_CBK_SIG,
	BT_A2DP_CONNECT_ING_SIG = BT_A2DP_CBK_SIG,
	BT_A2DP_CONNECT_FAIL_SIG,
	BT_A2DP_CONNECT_SUCCESS_SIG,
	BT_A2DP_DISCONNECT_ING_SIG,
	BT_A2DP_DISCONNECT_FAIL_SIG,
	BT_A2DP_DISCONNECT_SUCCESS_SIG,
	BT_A2DP_CBK_MAX_SIG = BT_A2DP_DISCONNECT_SUCCESS_SIG,

	BT_SPP_CBK_SIG,
	BT_SPP_CONNECT_FAIL_SIG = BT_SPP_CBK_SIG,
	BT_SPP_CONNECT_SUCCESS_SIG,
	BT_SPP_DISCONNECT_SUCCESS_SIG,
	BT_SPP_DISCONNECT_FAIL_SIG,
	BT_SPP_DATA_IN_SIG,
	BT_SPP_CBK_MAX_SIG = BT_SPP_DATA_IN_SIG,

	BT_SDP_CBK_SIG,
	BT_SDP_DID_DATA_IN_SIG,
	BT_SDP_CBK_MAX_SIG,

	BT_AVRCP_REMOTE_REQ_SIG,
	BT_AVRCP_CONNECT_SUCCESS_SIG = BT_AVRCP_REMOTE_REQ_SIG,
	BT_AVRCP_DISCONNECT_SUCCESS_SIG,
	BT_VOLUME_SET_REQ_SIG,
	BT_VOLUME_REG_REQ_SIG,
	BT_SAMSUNG_TV_FLAG_SIG,
	BT_PLAY_REQ_SIG,
	BT_PAUSE_REQ_SIG,
	BT_POWER_REQ_SIG,
	BT_VOLUMEUP_REQ_SIG,
	BT_VOLUMEDOWN_REQ_SIG,
	BT_MUTE_REQ_SIG,
	BT_NEXT_PLAY_REQ_SIG,
	BT_PREV_PLAY_REQ_SIG,
	BT_AVRCP_REMOTE_REQ_MAX_SIG = BT_PREV_PLAY_REQ_SIG,
	BT_SRV_CBK_MAX_SIG = BT_AVRCP_REMOTE_REQ_MAX_SIG,

	TRANSMIT_DATA_CBK_SIG,
	BT_RECV_DATA_SIG = TRANSMIT_DATA_CBK_SIG,
	BT_RECV_TRANS_DATA_SIG,
	BT_TRANS_DATA_FINISH_SIG,
	BT_CUSTOM_DATA_IN_SIG,
	TRANSMIT_DATA_CBK_MAX_SIG,


}BTSRVEVEN_SIG_e;


typedef struct stBTReplyPincode
{
	BtAddr_t addr;
	char pincode[4];
}BtReplyPincodeInfo;


typedef struct
{
	BtAddr_t addr;
	ENABLE_STATE_e state;
}BtDenySetInfo;


typedef struct stBT_CBK_EVENT
{
	QEvent super;
	int    type;
    QActive* who;
	void *pdata;
	int  len;
}BtCBKEvt;

typedef int (*AoUserCbkHandle)(void *pMsg ,int type);

typedef struct stAO_USER_CBKFUNC
{
	AoUserCbkHandle UserCbkFunc;
}AO_USER_CBK_FUNC;



#define  AoBtLocalNameSet	BtDoLocalNameSet
#define  AoBtLocalAddrSet	BtDoLocalAddrSet


int AoBtIsPlay(void);
int AoBtGetBondDevNum(int *pBondedNum);
int AoBtGetBondDevByIdex(int sdBondedNum,stBtDevInfo *pBtDev);
int AoBtGetRemoteDevNum(int *pDevNum);
int AoBtGetAddrByDevRole(BtAddr_t *pBtAddr,DEVROLE_DEX_e dex);
int AoBtGetConnectStateByDevRole(DEVROLE_DEX_e dex,BT_PROFILE_STATE_e *pState);
int AoBtGetProfileState(BtAddr_t *pBtAddr,BT_PROFILE_e profile,BT_PROFILE_STATE_e *pstate);
int AoBtGetRemoteDevInfo(BtAddr_t *pBtAddr,stBtDevInfo *pBtDev);
int AoBtGetRemoteDevByIdex(int dex,stBtDevInfo *pBtDev);
int AoBtLocalNameGet(char *pName);
int AoBtLocalAddrGet(BtAddr_t*pBtAddr);
int AoBtGetLocalInfo(BtLocalInfo *pdev);
int AoBtCbkRegister(AO_USER_CBK_FUNC* pMsgSendFunc);
int AoBtCbkDelRegister(AO_USER_CBK_FUNC* pMsgSendFunc);
int AoBtScanModeGet(SCAN_MODE_e *pMode);
int AoIsBtMode(void);
int AoGetTransModeState(void);
int AoGetTwsState();
int AoBtGetState(BT_STATE_e *pState);
int AoBtIsPlay(void);
int AoBtIsSearching(void);
int BtAoAudioAllow(int IsTrue);

QActive  *BtAoGet(void);
Connected_Device *Connected_Device_List_Get(void);
BtCBKEvt *BtMsgPackage(BTEVTSIG_e sig,void *pData,int DataLen);

#endif //__BT_AO_H__

